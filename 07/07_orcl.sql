--1.Создайте таблицу Report, содержащую два столбца – id и XML-столбец.
create table Report (
    id NUMBER GENERATED by default on null as IDENTITY,
    xm XMLTYPE
);

--2.Создайте процедуру генерации XML. XML должен включать данные из как минимум 3 соединенных таблиц, различные промежуточные итоги и штамп времени.
create or replace function CreateXML return xmltype 
as
  xml xmltype;
  b NVARCHAR2(600);
begin
   b:= 'select Orders.orderDate, Clients.firstName, Products.name
		from orders 
						join products on Orders.productId = Products.id
						join clients on Clients.id = Orders.clientId';
  select xmlelement("XML",
      xmlelement(evalname('OCP'),
      dbms_xmlgen.getxmltype(b)))
  into xml
  from dual;
  return xml;
end CreateXML;

select CreateXML from dual;


--3.Создайте процедуру вставки этого XML в таблицу Report.
CREATE OR REPLACE PROCEDURE InsertIntoReportTable(
    x IN XMLTYPE)
IS
brgin
      insert INTO Report(xm) VALUES (x);
      commit;
end;

begin 
    InsertIntoReportTable(CreateXML);
end;

select * from Report;
--delete from Report;

--4.Создайте индекс над XML-столбцом в таблице Report. 
create index xml_index on Report(extractvalue(xm,'/XML/OCP/ROWSET/ROW/ORDER[0]/text()')); 

--5.Создайте процедуру извлечения значений элементов и/или атрибутов из XML -столбца в таблице Report (параметр – значение атрибута или элемента).
create or replace procedure GetFromXml(key in VARCHAR2, res out VARCHAR2 ) 
is
begin
      select x.* into res from REPORT r
        cross join xmltable('/XML/OCP/ROWSET/ROW'
                           passing r.XM
                           columns product_type varchar2(20) path 'NAME') x
                           fetch first 1 rows only;
end;

DECLARE 
    key VARCHAR2(4000); 
BEGIN
  GetFromXml('NAME', key);
  DBMS_OUTPUT.PUT_LINE(key);
END;
